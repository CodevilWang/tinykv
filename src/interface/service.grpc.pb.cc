// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace TINYKV {

static const char* KVService_method_names[] = {
  "/TINYKV.KVService/Get",
  "/TINYKV.KVService/Insert",
};

std::unique_ptr< KVService::Stub> KVService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KVService::Stub> stub(new KVService::Stub(channel));
  return stub;
}

KVService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Get_(KVService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Insert_(KVService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KVService::Stub::Get(::grpc::ClientContext* context, const ::TINYKV::ReqKey& request, ::TINYKV::RespValue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

void KVService::Stub::experimental_async::Get(::grpc::ClientContext* context, const ::TINYKV::ReqKey* request, ::TINYKV::RespValue* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::TINYKV::RespValue>* KVService::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::TINYKV::ReqKey& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::TINYKV::RespValue>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::TINYKV::RespValue>* KVService::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::TINYKV::ReqKey& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::TINYKV::RespValue>::Create(channel_.get(), cq, rpcmethod_Get_, context, request, false);
}

::grpc::Status KVService::Stub::Insert(::grpc::ClientContext* context, const ::TINYKV::ReqKeyValue& request, ::TINYKV::RespValue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Insert_, context, request, response);
}

void KVService::Stub::experimental_async::Insert(::grpc::ClientContext* context, const ::TINYKV::ReqKeyValue* request, ::TINYKV::RespValue* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Insert_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::TINYKV::RespValue>* KVService::Stub::AsyncInsertRaw(::grpc::ClientContext* context, const ::TINYKV::ReqKeyValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::TINYKV::RespValue>::Create(channel_.get(), cq, rpcmethod_Insert_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::TINYKV::RespValue>* KVService::Stub::PrepareAsyncInsertRaw(::grpc::ClientContext* context, const ::TINYKV::ReqKeyValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::TINYKV::RespValue>::Create(channel_.get(), cq, rpcmethod_Insert_, context, request, false);
}

KVService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVService::Service, ::TINYKV::ReqKey, ::TINYKV::RespValue>(
          std::mem_fn(&KVService::Service::Get), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KVService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KVService::Service, ::TINYKV::ReqKeyValue, ::TINYKV::RespValue>(
          std::mem_fn(&KVService::Service::Insert), this)));
}

KVService::Service::~Service() {
}

::grpc::Status KVService::Service::Get(::grpc::ServerContext* context, const ::TINYKV::ReqKey* request, ::TINYKV::RespValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KVService::Service::Insert(::grpc::ServerContext* context, const ::TINYKV::ReqKeyValue* request, ::TINYKV::RespValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace TINYKV

